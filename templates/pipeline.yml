Description: flo cluster ecs deployment pipeline stack

Parameters:
  ServiceToken:
    Type: String
    NoEcho: True
  ServiceName:
    Type: String
  ServiceBranch:
    Type: String
  ServiceRepo:
    Type: String
  ServiceOwner:
    Type: String
  ServicePort:
    Type: Number
  ServiceMemory:
    Type: Number
  ServiceCount:
    Type: Number
  ServiceStack:
    Type: String
  CodeBuildSize:
    Type: String
    Default: BUILD_GENERAL1_SMALL
  CodeBuildImage:
    Type: String
    Default: aws/codebuild/docker:1.12.1  # ubuntu
    #Default: "aws/codebuild/eb-python-3.4-amazonlinux-64:2.1.6"  # amznlinux



Resources:
  Repository:
    Type: AWS::ECR::Repository
    DeletionPolicy: Retain


  CloudFormationExecutionRole:
    Type: AWS::IAM::Role
    DeletionPolicy: Retain
    Properties:
      Path: /
      AssumeRolePolicyDocument: |
        {
            "Statement": [{
                "Effect": "Allow",
                "Principal": { "Service": [ "cloudformation.amazonaws.com" ]},
                "Action": [ "sts:AssumeRole" ]
            }]
        }
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Resource: "*"
                Effect: Allow
                Action:
                  - ecs:*
                  - ecr:*
                  - iam:*


  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument: |
        {
            "Statement": [{
                "Effect": "Allow",
                "Principal": { "Service": [ "codebuild.amazonaws.com" ]},
                "Action": [ "sts:AssumeRole" ]
            }]
        }
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Resource: "*"
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - ecr:GetAuthorizationToken
                  - ec2:CreateNetworkInterface
                  - ec2:DescribeNetworkInterfaces
                  - ec2:DeleteNetworkInterface
                  - ec2:DescribeSubnets
                  - ec2:DescribeSecurityGroups
                  - ec2:DescribeDhcpOptions
                  - ec2:DescribeVpcs
                  - ec2:CreateNetworkInterfacePermission

              - Resource: !Sub arn:aws:s3:::${ArtifactBucket}/*
                Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:GetObjectVersion
              - Resource: !Sub arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/${Repository}
                Effect: Allow
                Action:
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                  - ecr:BatchCheckLayerAvailability
                  - ecr:PutImage
                  - ecr:InitiateLayerUpload
                  - ecr:UploadLayerPart
                  - ecr:CompleteLayerUpload


  CodePipelineServiceRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument: |
        {
            "Statement": [{
                "Effect": "Allow",
                "Principal": { "Service": [ "codepipeline.amazonaws.com" ]},
                "Action": [ "sts:AssumeRole" ]
            }]
        }
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Resource:
                  - !Sub arn:aws:s3:::${ArtifactBucket}/*
                Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:GetBucketVersioning
              - Resource: "*"
                Effect: Allow
                Action:
                  - codebuild:StartBuild
                  - codebuild:BatchGetBuilds
                  - cloudformation:*
                  - iam:PassRole


  ArtifactBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain


  ContainerPublish:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: ContainerPublish
      Artifacts:
        Type: CODEPIPELINE
      Source:
        Type: CODEPIPELINE
        BuildSpec: |
          version: 0.2
          phases:
            pre_build:
              commands:
                - env
                - SERVICE_TAG=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | head -c 8)
                - echo ${SERVICE_NAME}
                - echo ${SERVICE_TAG}
                - echo ${SERVICE_STACK}
                - echo ${REPOSITORY_URI}
                - "$(aws ecr get-login)"
            build:
              commands:
                - cd app
                - docker build --tag "${REPOSITORY_URI}:${SERVICE_TAG}" .
                - docker images
            post_build:
              commands:
                - docker push "${REPOSITORY_URI}:${SERVICE_TAG}"
                - printf '{"service_tag":"%s","service_name":"%s","service_stack":"%s"}' ${SERVICE_TAG} ${SERVICE_NAME} ${SERVICE_STACK}> ../build.json
                - cat ../build.json
          artifacts:
            files:
              - build.json
              - templates/service.yaml
      Environment:
        ComputeType: !Ref CodeBuildSize
        Image: !Ref CodeBuildImage
        Type: "LINUX_CONTAINER"
        EnvironmentVariables:
          - Name: AWS_DEFAULT_REGION
            Value: !Ref AWS::Region
          - Name: REPOSITORY_URI
            Value: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${Repository}
          - Name: SERVICE_NAME
            Value: !Ref ServiceName
          - Name: SERVICE_STACK
            Value: !Ref ServiceStack
      ServiceRole: !Ref CodeBuildServiceRole


  Pipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      RoleArn: !GetAtt CodePipelineServiceRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref ArtifactBucket
      Stages:
        - Name: Source
          Actions:
            - Name: App
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Version: 1
                Provider: GitHub
              Configuration:
                Owner: !Ref ServiceOwner
                Repo: !Ref ServiceRepo
                OAuthToken: !Ref ServiceToken
                Branch: !Ref ServiceBranch
              OutputArtifacts:
                - Name: AppSource
              RunOrder: 1
        - Name: BuildService
          Actions:
            - Name: ContainerPublish
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref ContainerPublish
              InputArtifacts:
                - Name: AppSource
              OutputArtifacts:
                - Name: PublishOutput
              RunOrder: 1
        - Name: DeployService
          Actions:
            - Name: !Ref ServiceStack
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: 1
                Provider: CloudFormation
              Configuration:
                ChangeSetName: Deploy
                ActionMode: CREATE_UPDATE
                StackName: !Ref ServiceStack
                Capabilities: CAPABILITY_NAMED_IAM
                TemplatePath: "PublishOutput::templates/service.yaml"
                RoleArn: !GetAtt CloudFormationExecutionRole.Arn
                ParameterOverrides: !Sub |
                  {
                    "ServiceName": "${Repository}",
                    "ServiceRepo": "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com",
                    "ServiceTag": { "Fn::GetParam" : [ "PublishOutput", "build.json", "service_tag" ] },
                    "ServiceMemory": "${ServiceMemory}",
                    "ServicePort": "${ServicePort}",
                    "ServiceCount": "${ServiceCount}"
                  }
              InputArtifacts:
                - Name: PublishOutput
              RunOrder: 1


Outputs:
  PipelineUrl:
    Value: !Sub https://console.aws.amazon.com/codepipeline/home?region=${AWS::Region}#/view/${Pipeline}
  ECR:
    Value: !Ref Repository
